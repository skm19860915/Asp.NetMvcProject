/**
 * Everslider - Responsive jQuery Carousel Plugin
 * http://plugins.gravitysign.com/everslider
 * Copyright (c) 2013 Roman Yurchuk
 * Version 1.6.1
*/

(function (e) { "use strict"; function t(e) { var t = false, n = ["Webkit", "Moz", "O", "ms"]; var r = document.createElement("div"); if (typeof r.style[e] === "string") { t = e } else { var i = e.charAt(0).toUpperCase() + e.substr(1); for (var s in n) { if (typeof r.style[n[s] + i] === "string") { t = n[s] + i; break } } } r = null; return t } function n() { var e = { WebkitTransition: "-webkit-", MozTransition: "-moz-", msTransition: "-ms-", OTransition: "-o-", transition: "" }; if (/(Safari|Chrome)/.test(navigator.userAgent)) { return e["WebkitTransition"] } return e[t("transition")] } function r() { var e = false, n = document.createElement("div"); var r = t("transform"); n.style[r] = "rotateY(45deg)"; if (n.style[r] !== "") { e = true } n = null; return e } function i(e, n) { var r = t("transform"); var i = { left: 0, top: 0 }; if (r && n) { var s = e.css(r); if (s.indexOf("matrix") === 0) { s = s.split("(")[1].split(")")[0].split(/,\s*/); i.left = parseInt(s[4], 10); i.top = parseInt(s[5], 10) } } else { i = e.position() } return i } function f(e, t, n) { if (typeof n === "object") { var r = u + "transform"; l(e, r, n.duration, n.easing, n.delay, n.complete); if (t === i(e, true).left) { n.complete.call(e, r) } } if (a) { e.css(o, "translate3d(" + parseInt(t, 10) + "px, 0px, 0px)") } else { e.css(o, "translate(" + parseInt(t, 10) + "px, 0px)") } } function l(t, n, r, i, o, u) { var a = { linear: "linear", swing: "cubic-bezier(.02,.01,.47,1)", easeOutCubic: "cubic-bezier(.215,.61,.355,1)", easeInOutCubic: "cubic-bezier(.645,.045,.355,1)", easeInCirc: "cubic-bezier(.6,.04,.98,.335)", easeOutCirc: "cubic-bezier(.075,.82,.165,1)", easeInOutCirc: "cubic-bezier(.785,.135,.15,.86)", easeInExpo: "cubic-bezier(.95,.05,.795,.035)", easeOutExpo: "cubic-bezier(.19,1,.22,1)", easeInOutExpo: "cubic-bezier(1,0,0,1)", easeInQuad: "cubic-bezier(.55,.085,.68,.53)", easeOutQuad: "cubic-bezier(.25,.46,.45,.94)", easeInOutQuad: "cubic-bezier(.455,.03,.515,.955)", easeInQuart: "cubic-bezier(.895,.03,.685,.22)", easeOutQuart: "cubic-bezier(.165,.84,.44,1)", easeInOutQuart: "cubic-bezier(.77,0,.175,1)", easeInQuint: "cubic-bezier(.755,.05,.855,.06)", easeOutQuint: "cubic-bezier(.23,1,.32,1)", easeInOutQuint: "cubic-bezier(.86,0,.07,1)", easeInSine: "cubic-bezier(.47,0,.745,.715)", easeOutSine: "cubic-bezier(.39,.575,.565,1)", easeInOutSine: "cubic-bezier(.445,.05,.55,.95)", easeInBack: "cubic-bezier(.6,-.28,.735,.045)", easeOutBack: "cubic-bezier(.175, .885,.32,1.275)", easeInOutBack: "cubic-bezier(.68,-.55,.265,1.55)" }; var f = { transition: "transitionend", OTransition: "oTransitionEnd otransitionend", WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend" }; n = n.split(/\s+/); r = (parseInt(r, 10) / 1e3 || 0) + "s"; i = a[i] || a["swing"]; if (typeof o === "function") { u = o; o = 0 } o = (parseInt(o, 10) / 1e3 || 0) + "s"; u = u || e.noop; var l = t.css(s); t.bind(f[s], function (n) { var r = n.originalEvent; if (r.target === this) { u.call(t, r.propertyName); e(this).css(s, l).unbind(n) } n.stopPropagation() }); var c = ""; for (var h = 0; h < n.length; h++) { c += n[h] + " " + r + " " + i + " " + o + ", " } t.css(s, c.slice(0, -2)) } function c(n, r) { this.offset = 0; this.visible = 0; this.lock = false; this.timer = 0; this.api = {}; this.settings = r; this.container = e(n); this.list = this.container.find("ul.es-slides"); this.total = this.list.children("li").length; this.slide = this.list.children("li:first-child"); this.cssok = t("transition") && this.settings.useCSS; var i = this; if (this.total === 0) { return null } if (this.settings.moveSlides === "auto") { this.settings.moveSlides = 9999 } else { this.settings.moveSlides = parseInt(this.settings.moveSlides, 10) || 1 } this.settings.itemWidth = parseInt(this.settings.itemWidth, 10) || 0; if (this.settings.itemWidth > 0) { this.list.children().css("width", this.settings.itemWidth) } this.settings.itemHeight = parseInt(this.settings.itemHeight, 10) || 0; if (this.settings.itemHeight > 0) { this.list.children().css("height", this.settings.itemHeight) } if (this.settings.itemMargin !== false) { this.list.children().css("margin-right", parseInt(this.settings.itemMargin, 10) || 0) } if (!this.settings.itemKeepRatio) { this.list.children().css({ height: "auto" }) } this.slide_width = this.slide.width(); this.slide_margin = parseInt(this.slide.css("margin-right"), 10) || 0; this.slide_ratio = this.slide.height() / this.slide.width(); if (this.settings.maxVisible > 0) { var s = this.settings.maxVisible * (this.slide_width + this.slide_margin) - this.slide_margin; this.container.css("max-width", s) } else { this.container.css("max-width", this.settings.maxWidth) } if (this.settings.mode === "carousel") { var o = this.list.children().clone(true), u = this.list.children().clone(true); this.list.prepend(document.createComment(" END CLONED ")).prepend(o).prepend(document.createComment(" BEGIN CLONED ")); this.list.append(document.createComment(" BEGIN CLONED ")).append(u).append(document.createComment(" END CLONED ")); this.offset = this.total; this.total = this.total * 3; var a = this.offset * (this.slide_width + this.slide_margin); if (this.cssok) { f(this.list, -a) } else { this.list.css("left", -a) } } if (this.settings.ticker && this.settings.mode !== "normal") { this.enableTicker() } if (this.settings.navigation) { this.container.append(['<div class="es-navigation">', '<a href="" class="es-prev">' + this.settings.prevNav + "</a>", '<a href="" class="es-next">' + this.settings.nextNav + "</a>", "</div>"].join("\n")); this.updateNavigation(this.offset); this.container.find(".es-prev").click(function (e) { i.slidePrevious(); e.preventDefault() }).end().find(".es-next").click(function (e) { i.slideNext(); e.preventDefault() }).end() } if (this.settings.pagination && this.settings.mode !== "carousel") { this.container.append('<div class="es-pagination"></div>') } if (this.settings.touchSwipe) { this.enableTouchSwipe() } if (this.settings.mouseWheel) { this.enableMouseWheel() } if (this.settings.keyboard) { this.enableKeyboard() } e(window).bind("resize", function () { window.clearTimeout(i.timer); i.timer = window.setTimeout(function () { i.resizeSlides() }, i.settings.fitDelay) }).trigger("resize"); e.extend(this.api, { slideNext: function () { i.slideNext() }, slidePrevious: function () { i.slidePrevious() }, slideTo: function (e) { i.slideTo(e) }, isSliding: function () { return i.isSliding() }, getVisibleSlides: function () { return i.getVisibleSlides() }, tickerPause: function () { if ("tickerPause" in i) { i.tickerPause() } }, tickerPlay: function () { if ("tickerPlay" in i) { i.tickerPlay() } } }); this.container.data("everslider", this.api); this.container.bind("everslider", function (e, t, n) { if (t in i.api) { i.api[t](n) } return false }); window.setTimeout(function () { i.container.addClass("es-slides-ready"); i.getVisibleSlides().addClass("es-after-slide"); if (typeof i.settings.slidesReady === "function") { i.settings.slidesReady.call(i.container.get(0), i.api) } }, parseInt(this.settings.fitDelay, 10) + parseInt(this.settings.fitDuration, 10)) } var s = t("transition"); var o = t("transform"); var u = n(); var a = r(); c.prototype.slideNext = function () { if (!this.lock) { this.slideOffset(this.getOffset("next")) } }; c.prototype.slidePrevious = function () { if (!this.lock) { this.slideOffset(this.getOffset("prev")) } }; c.prototype.slideTo = function (e) { if (this.settings.mode === "carousel") { e = this.total / 3 + Math.min(e, this.total / 3 - this.visible) } var t = e - this.offset; var n = t > 0 ? "next" : "prev"; var r = this.offset; for (var i = 0; i < Math.abs(t) ; i++) { this.offset = this.getOffset(n) } var s = this.offset; this.offset = r; this.slideOffset(s) }; c.prototype.isSliding = function () { return this.lock }; c.prototype.getVisibleSlides = function () { return this.list.children().slice(this.offset, this.offset + this.visible) }; c.prototype.getOffset = function (e) { var t = Math.min(this.settings.moveSlides, this.visible); if (e === "prev") { if (this.settings.mode === "carousel" && this.offset === 0) { var n = this.total / 3 * (this.slide.width() + this.slide_margin); if (this.cssok) { if (this.settings.effect !== "fade") f(this.list, -n) } else { if (this.settings.effect !== "fade") this.list.css("left", -n) } return this.total / 3 - t } else if (this.settings.mode === "circular" && this.offset === 0) { return this.total - this.visible } else { return this.offset - (this.offset > t ? t : this.offset) } } if (e === "next") { var r = this.total - (this.offset + this.visible); if (this.settings.mode === "carousel" && r === 0) { var n = (this.offset - this.total / 3) * (this.slide.width() + this.slide_margin); if (this.cssok) { if (this.settings.effect !== "fade") f(this.list, -n) } else { if (this.settings.effect !== "fade") this.list.css("left", -n) } return this.offset - this.total / 3 + t } else if (this.settings.mode === "circular" && r === 0) { return 0 } else { return this.offset + (r > t ? t : r) } } }; c.prototype.slideOffset = function (t, n) { if (!n && t === this.offset) { return } var r = this; var i = function () { r.lock = false; r.offset = t; if (!n) { r.syncContainerHeight(); r.list.children(".es-after-slide").removeClass("es-after-slide"); r.getVisibleSlides().removeClass("es-before-slide").addClass("es-after-slide").trigger("es-after-slide"); if (typeof r.settings.afterSlide === "function") { r.settings.afterSlide.call(r.container.get(0), r.getVisibleSlides()) } } }; this.lock = true; if (!n) { this.list.children().slice(t, t + this.visible).not(".es-after-slide").addClass("es-before-slide").trigger("es-before-slide"); if (typeof this.settings.beforeSlide === "function") { this.settings.beforeSlide.call(this.container.get(0), this.getVisibleSlides()) } } if (this.settings.pagination && this.settings.mode !== "carousel") { var s = Math.min(this.settings.moveSlides, this.visible); var o = Math.ceil(t / s); this.container.find(".es-pagination a:eq(" + o + ")").addClass("es-active").siblings().removeClass("es-active") } this.updateNavigation(t); var u = t * (this.slide.width() + this.slide_margin); if (this.cssok) { if (this.settings.effect === "fade") { var a = this.getVisibleSlides(); var c = this.list.children().slice(t, t + this.visible); if (this.settings.fadeDirection * t > this.offset * this.settings.fadeDirection) { c = Array.prototype.reverse.call(c); a = Array.prototype.reverse.call(a) } e.each(a, function (t) { l(e(this), "opacity", r.settings.fadeDuration, r.settings.fadeEasing, r.settings.fadeDelay * t, function () { if (t < r.visible - 1) return; c.css("opacity", 0); f(r.list, -u, { duration: 0, easing: "linear", delay: 15, complete: function () { e.each(c, function (t) { l(e(this), "opacity", r.settings.fadeDuration, r.settings.fadeEasing, r.settings.fadeDelay * t, function () { if (t < r.visible - 1) return; a.add(c).css("opacity", ""); i() }); e(this).css("opacity", 1) }) } }) }); e(this).css("opacity", 0) }) } else { f(this.list, -u, { duration: this.settings.slideDuration, easing: this.settings.slideEasing, delay: this.settings.slideDelay, complete: i }) } } else { if (this.settings.effect === "fade") { var a = this.getVisibleSlides(); var c = this.list.children().slice(t, t + this.visible); if (this.settings.fadeDirection * t > this.offset * this.settings.fadeDirection) { c = Array.prototype.reverse.call(c); a = Array.prototype.reverse.call(a) } e.each(a, function (t) { e(this).stop().delay(r.settings.fadeDelay * t).animate({ opacity: 0 }, r.settings.fadeDuration, r.settings.fadeEasing, function () { if (t < r.visible - 1) return; c.css("opacity", 0); r.list.delay(10).queue(function () { e(this).css("left", -u).dequeue(); e.each(c, function (t) { e(this).stop().delay(r.settings.fadeDelay * t).animate({ opacity: 1 }, r.settings.fadeDuration, r.settings.fadeEasing, function () { if (t < r.visible - 1) return; a.add(c).css("opacity", ""); i() }) }) }) }) }) } else { this.list.stop().delay(this.settings.slideDelay).animate({ left: -u }, this.settings.slideDuration, this.settings.slideEasing, i) } } }; c.prototype.resizeSlides = function () { this.lock = true; this.visible = this.container.width() / (this.slide_width + this.slide_margin); if (this.visible % 1 === 0 || this.visible % 1 < .5) { this.visible = Math.ceil(this.visible) } var t = (this.container.width() + this.slide_margin) / this.visible - this.slide_margin; var n = this.slide_ratio * t; var r = { width: Math.round(t) }; if (this.settings.itemKeepRatio) { r.height = Math.round(n) } if (this.offset > 0) { if (this.offset + this.visible > this.total) { this.offset = this.total - this.visible } var i = this.offset * (t + this.slide_margin); if (this.cssok) { f(this.list, -i) } else { this.list.css("left", -i) } } var s = this; var o = this.settings.fitDuration; var u = this.settings.fitEasing; var a = function () { s.lock = false; s.syncContainerHeight() }; this.list.children().each(function () { if (s.cssok) { if (e(this).width() === Math.round(t)) { a() } else { l(e(this), "width height", o, u, a); e(this).css(r) } } else { e(this).stop().animate(r, o, u, a) } }); this.updatePagination() }; c.prototype.syncContainerHeight = function () { if (this.settings.syncHeight && !this.settings.itemKeepRatio) { var t = 0; e.each(this.getVisibleSlides(), function () { if (e(this).height() > t) { t = e(this).height() } }); var n = this.settings.syncHeightDuration, r = this.settings.syncHeightEasing; if (this.cssok) { l(this.container, "height", n, r); this.container.css("height", t) } else { this.container.stop().animate({ height: t }, n, r) } } }; c.prototype.updatePagination = function () { if (!this.settings.pagination || this.settings.mode === "carousel") { return } var t = this; var n = Math.min(this.settings.moveSlides, this.visible); var r = Math.ceil(this.total * 2 / (n + this.visible)); var i = this.container.find(".es-pagination").empty(); for (var s = 0; s < r; s++) { e('<a href="#">' + s + "</a>").click(function (e) { return function (r) { if (t.lock) { return } var i = Math.min(e * n, t.total - t.visible); t.slideOffset(i); r.preventDefault() } }(s)).appendTo(i) } var o = Math.ceil(this.offset / n); i.find("a:eq(" + o + ")").addClass("es-active").siblings().removeClass("es-active") }; c.prototype.updateNavigation = function (e) { if (this.settings.navigation && this.settings.mode === "normal") { var t = this.container.find(".es-navigation a"); t.removeClass("es-first es-last"); if (e === 0) { t.filter(".es-prev").addClass("es-first") } if (e === this.total - this.visible) { t.filter(".es-next").addClass("es-last") } } }; c.prototype.enableTouchSwipe = function () { var t = this, n = false; var r = 0, s = 0, o = 0; var u = function (e) { var u = e; if (e.type.indexOf("touch") === 0) { u = e.originalEvent.changedTouches[0] } if (!t.lock) { n = true; r = u.pageX; s = u.pageY; o = i(t.list, t.cssok).left; t.container.bind("mousemove touchmove", a); t.container.addClass("es-swipe-grab") } }; var a = function (e) { var n = e; if (e.type.indexOf("touch") === 0) { n = e.originalEvent.changedTouches[0] } var i = n.pageX - r; var u = n.pageY - s; if (Math.abs(i) < t.settings.swipeThreshold) { if (t.settings.effect === "slide") { if (t.cssok) { f(t.list, o + i) } else { t.list.css("left", o + i) } } } else { var l = i > 0 ? "prev" : "next"; var c = t.getOffset(l); t.slideOffset(c); t.container.unbind("mousemove touchmove", a) } if (!t.settings.swipePage) { e.preventDefault() } }; var l = function () { if (n) { if (!t.lock && o !== i(t.list, t.cssok).left) { t.slideOffset(t.offset, true) } t.container.unbind("mousemove touchmove", a); n = false; t.container.removeClass("es-swipe-grab") } }; this.container.bind("mousedown touchstart", u); e("body").bind("mouseup touchend touchcancel", l); this.container.bind("dragstart", function (e) { e.preventDefault() }) }; c.prototype.enableMouseWheel = function () { if (typeof e.fn.mousewheel !== "function") { return } var t = this; this.container.bind("mousewheel", function (e, n) { if (n > 0) { t.slidePrevious() } else { t.slideNext() } e.preventDefault() }) }; c.prototype.enableKeyboard = function () { var t = this; e(document).bind("keydown", function (e) { if (e.which === 39) { t.slideNext() } else if (e.which === 37) { t.slidePrevious() } }) }; c.prototype.enableTicker = function () { var t = this, n = true, r, i; var s = 0, o = 0, u = parseInt(this.settings.tickerTimeout, 10); if (this.settings.effect === "fade") { s = parseInt(this.settings.fadeDelay, 10); o = parseInt(this.settings.fadeDuration, 10) } else { s = parseInt(this.settings.slideDelay, 10); o = parseInt(this.settings.slideDuration, 10) } this.tickerPlay = function () { this.container.find(".es-ticker a").hide().filter(".es-pause").show(); if (n) { i = u } else { if (t.settings.effect === "fade") { i = (t.visible - 1) * s + t.visible * o + u } else { i = s + o + u } } window.clearInterval(r); r = window.setInterval(function () { t.slideNext(); if (n) { n = false; t.tickerPlay() } }, i) }; this.tickerPause = function () { this.container.find(".es-ticker a").hide().filter(".es-play").show(); window.clearInterval(r); n = true }; this.container.append('<div class="es-ticker"></div>'); e('<a href="#" class="es-play">' + this.settings.tickerPlay + "</a>").click(function (e) { t.tickerPlay(); e.preventDefault() }).appendTo(this.container.find(".es-ticker")); e('<a href="#" class="es-pause">' + this.settings.tickerPause + "</a>").click(function (e) { t.tickerPause(); e.preventDefault() }).appendTo(this.container.find(".es-ticker")); if (this.settings.tickerHover) { var a = 0; this.container.hover(function () { window.clearTimeout(a); a = window.setTimeout(function () { t.tickerPause() }, t.settings.tickerHoverDelay) }, function () { window.clearTimeout(a); a = window.setTimeout(function () { t.tickerPlay() }, t.settings.tickerHoverDelay) }) } this.tickerPause(); if (this.settings.tickerAutoStart) { this.tickerPlay() } }; e.fn.everslider = function (t) { var n = e.extend({ mode: "normal", effect: "slide", useCSS: true, itemWidth: false, itemHeight: false, itemMargin: false, itemKeepRatio: true, maxWidth: "100%", maxVisible: 0, moveSlides: 1, slideDelay: 0, slideDuration: 500, slideEasing: "swing", fadeDelay: 200, fadeDuration: 500, fadeEasing: "swing", fadeDirection: 1, fitDelay: 300, fitDuration: 200, fitEasing: "swing", syncHeight: false, syncHeightDuration: 200, syncHeightEasing: "swing", navigation: true, nextNav: "<span>Next</span>", prevNav: "<span>Previous</span>", pagination: true, touchSwipe: true, swipeThreshold: 50, swipePage: false, mouseWheel: false, keyboard: false, ticker: false, tickerTimeout: 2e3, tickerAutoStart: true, tickerPlay: "<span>Play</span>", tickerPause: "<span>Pause</span>", tickerHover: false, tickerHoverDelay: 300, slidesReady: function () { }, beforeSlide: function () { }, afterSlide: function () { } }, t); return this.each(function () { new c(this, n) }) } })(jQuery)