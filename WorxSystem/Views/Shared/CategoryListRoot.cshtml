@model List<Hierarchy<int, Category>>
@{ 
    User impersonatedUser = null;
    if (User.Identity.IsAuthenticated && !User.Identity.Name.Equals(Html.FBOUserName(), StringComparison.OrdinalIgnoreCase))
    {
        //admin user is impersonating another user, check the impersonated user's roles
        impersonatedUser = UserClient.GetUserByUserName(User.Identity.Name, Html.FBOUserName());
    }
}
@foreach (Hierarchy<int, Category> categoryTree in Model.OrderBy(c => c.Current.DisplayOrder))
{

    if (!string.IsNullOrEmpty(categoryTree.Current.RolesAllowed))
    {
        if (impersonatedUser != null)
        {
            if (!impersonatedUser.Roles.Any(r => r.Name.Equals(categoryTree.Current.RolesAllowed, StringComparison.OrdinalIgnoreCase)))
            {
                continue;
            }
        }
        else
        {
            if (!User.IsInRole(categoryTree.Current.RolesAllowed)) { continue; }
        }
    }

    if (!string.IsNullOrEmpty(categoryTree.Current.EnabledCustomProperty))
    {
        if (categoryTree.Current.EnabledCustomProperty.StartsWith("#"))
        {
            if (!bool.Parse(categoryTree.Current.EnabledCustomProperty.Substring(1))) { continue; }
        }
        else if (categoryTree.Current.EnabledCustomProperty.Contains("&&") ||
                 categoryTree.Current.EnabledCustomProperty.Contains("||"))
        {
            if (!Html.EvaluateComplexEnabledCustomProperty(categoryTree.Current.EnabledCustomProperty)) { continue; }
        }
        else if (categoryTree.Current.EnabledCustomProperty.StartsWith("LTPROP_!"))
        {
            //render this category if no listing types have a 'true' value for the specified property
            string propName = categoryTree.Current.EnabledCustomProperty.Substring(8);
            bool skip = false;
            foreach (var listingType in ListingClient.ListingTypes)
            {
                var property = ListingClient.GetListingTypeProperties(listingType.Name, "Site").FirstOrDefault(p =>
                    p.Field.Name == propName && !string.IsNullOrWhiteSpace(p.Value));
                if (property != null && bool.Parse(property.Value) == true)
                {
                    skip = true;
                }
            }
            if (skip) { continue; }
        }
        else if (categoryTree.Current.EnabledCustomProperty.StartsWith("LTPROP_"))
        {
            //render this category if any listing types have a 'true' value for the specified property
            string propName = categoryTree.Current.EnabledCustomProperty.Substring(7);
            bool skip = true;
            foreach (var listingType in ListingClient.ListingTypes)
            {
                var property = ListingClient.GetListingTypeProperties(listingType.Name, "Site").FirstOrDefault(p =>
                    p.Field.Name == propName && !string.IsNullOrWhiteSpace(p.Value));
                if (property != null && bool.Parse(property.Value) == true)
                {
                    skip = false;
                }
            }
            if (skip) { continue; }
        }
        else if (categoryTree.Current.EnabledCustomProperty.StartsWith("!"))
        {
            if (bool.Parse(SiteClient.Settings[categoryTree.Current.EnabledCustomProperty.Substring(1)])) { continue; }
        }
        else
        {
            if (!bool.Parse(SiteClient.Settings[categoryTree.Current.EnabledCustomProperty])) { continue; }
        }
    }
    if (categoryTree.ChildHierarchies.Count == 0)
    {
        <div class="well well-sm hidden-xs hidden-sm">
            @if (!string.IsNullOrEmpty(categoryTree.Current.MVCAction))
            {
                @Html.ActionLink(Html.GlobalResource(categoryTree.Current.Name), categoryTree.Current.MVCAction)
            }
            else
            {
                @Html.GlobalResource(categoryTree.Current.Name)
            }
        </div>
    }
    else
    {
        <div class="panel panel-default hidden-xs hidden-sm">
            @if (string.IsNullOrEmpty(categoryTree.Current.MVCAction))
            {
                <div class="panel-heading">
                    @Html.GlobalResource(categoryTree.Current.Name)
                </div>
            }
            else
            {
                <div class="panel-heading">
                    @Html.ActionLink(Html.GlobalResource(categoryTree.Current.Name), categoryTree.Current.MVCAction)
                </div>
            }
            <ul class="nav nav-pills nav-stacked">
                @Html.Partial("CategoryList", categoryTree.ChildHierarchies)
            </ul>
        </div>
    }
}
<div class="dropdown visible-sm visible-xs">
    <button class="dropdown-toggle btn btn-default btn-block" data-toggle="dropdown">
        @Html.GlobalResource("MyAccountNavigation")&nbsp;<span class="caret"></span>
    </button>
    <ul class="dropdown-menu">
        <li>@Html.ActionLink(Html.GlobalResource("Summary"), "Summary")</li>
        @foreach (Hierarchy<int, Category> categoryTree in Model.OrderBy(c => c.Current.DisplayOrder))
        {

            if (!string.IsNullOrEmpty(categoryTree.Current.RolesAllowed))
            {
                if (impersonatedUser != null)
                {
                    if (!impersonatedUser.Roles.Any(r => r.Name.Equals(categoryTree.Current.RolesAllowed, StringComparison.OrdinalIgnoreCase)))
                    {
                        continue;
                    }
                }
                else
                {
                    if (!User.IsInRole(categoryTree.Current.RolesAllowed)) { continue; }
                }
            }

            if (!string.IsNullOrEmpty(categoryTree.Current.EnabledCustomProperty))
            {
                if (categoryTree.Current.EnabledCustomProperty.StartsWith("#"))
                {
                    if (!bool.Parse(categoryTree.Current.EnabledCustomProperty.Substring(1))) { continue; }
                }
                else if (categoryTree.Current.EnabledCustomProperty.Contains("&&") ||
                         categoryTree.Current.EnabledCustomProperty.Contains("||"))
                {
                    if (!Html.EvaluateComplexEnabledCustomProperty(categoryTree.Current.EnabledCustomProperty)) { continue; }
                }
                else if (categoryTree.Current.EnabledCustomProperty.StartsWith("!"))
                {
                    if (bool.Parse(SiteClient.Settings[categoryTree.Current.EnabledCustomProperty.Substring(1)])) { continue; }
                }
                else
                {
                    if (!bool.Parse(SiteClient.Settings[categoryTree.Current.EnabledCustomProperty]))
                    {
                        continue;
                    }
                }
            }
            if (string.IsNullOrEmpty(categoryTree.Current.MVCAction))
            {
                <li class="divider"></li>
                <li><a class="awe-nav-pointer"><strong>@Html.GlobalResource(categoryTree.Current.Name)</strong></a></li>
            }
            else
            {
                <li class="divider"></li>
                <li> @Html.ActionLink(Html.GlobalResource(categoryTree.Current.Name), categoryTree.Current.MVCAction)</li>
            }

            @Html.Partial("CategoryList", categoryTree.ChildHierarchies)
        }
    </ul>
</div>

