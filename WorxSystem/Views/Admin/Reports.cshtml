@model List<Dictionary<string, object>>

@{
    const int max_cols_per_row = 7;

    Layout = "~/Views/Admin/_AdminLayout.cshtml";
    string returnUrl = Request.Url.PathAndQuery;
    ViewBag.PageName = Html.AdminResource("CustomReportLineageString", Html.AdminResource((string)ViewData["ReportName"]));
    var columnList = ((List<string>)ViewData["Columns"]).ToArray();
}

@section head {
    <script src="~/Scripts/jquery.doubleScroll.js"></script>
    <script>
        var eventNavPageSize = 9;
        var isSubmitting = false;
        var eventSelectDialog;
        $(document).ready(function () {
            eventSelectDialog = new BootstrapDialog({
                title: '<span class="glyphicon glyphicon-list-alt"></span>&nbsp; @Html.AdminResourceString("ClickAnyEventToSelect").ToJavascriptSafeString()',
                message: '<img src="Content/Images/progress-wheel.gif" />',
                autodestroy: false,
                closable: true,
                buttons: [
                    {
                        label: '@Html.GlobalResourceString("Cancel").ToJavascriptSafeString()',
                        action: function (dialogItself) {
                            dialogItself.close();
                        }
                    }
                ]
            });

            eventSelectDialog.realize();
            //eventSelectDialog.getModalFooter().hide();

            //run once...
            $(".hideable-filter").each(function () {
                //if ($(this).val() != "") {
                    $(this).show();
                //}
            });
            $("#ShowFilterOptions").addClass("btn-info").removeClass("btn-default");

            //when any filter input is changed, submit the form
            $(".SubmitOnChange").change(function () {
                //submit container form
                if (!isSubmitting) {
                    isSubmitting = true;
                    $("#Report1").submit();
                    return true;
                }
                return false;
            });

            $("#ShowFilterOptions").click(function () {
                if ($(this).hasClass("btn-default")) {
                    $(this).removeClass("btn-default").addClass("btn-info");
                    //$(".hideable-filter").each(function () {
                    //    if ($(this).val() == "") {
                    //        $(this).hide();
                    //    }
                    //});
                    $(".hideable-filter").show();
                }
                else if ($(this).hasClass("btn-info")) {
                    $(this).addClass("btn-default").removeClass("btn-info");
                    //$(".hideable-filter").show();
                    $(".hideable-filter").each(function () {
                        if ($(this).val() == "") {
                            $(this).hide();
                        }
                    });
                }
            });

            $("#ApplyFilters").show().click(function () {
                if (!isSubmitting) {
                    isSubmitting = true;
                    $("#Report1").submit();
                }
                return false;
            });
            @{
                string exportURL = Html.GetActionUrl(MVC.EventActivityReportCSVAction);
                exportURL += "?" + HttpContext.Current.Request.QueryString;
            }
            $("#ExportCSV").show().click(function () {
                document.location = $.htmlDecode("@exportURL");
                return false;
            });

            $(".double-scroll").doubleScroll({ resetOnWindowResize: true });

            $(".re-sort-link").on("click", function (event) {
                event.preventDefault();
                var currentSortValue = $("#sort").val();
                var targetSortValue = $(this).data("columnName");
                if (currentSortValue == targetSortValue) {
                    //same column as previous sort, toggle direction
                    $("#descending").val($("#descending").val() == "True" ? "False" : "True");
                } else {
                    $("#sort").val(targetSortValue);
                    $("#descending").val("False");
                }
                $("#Report1").submit();
            });

            $("#LookUpEvent").on("click", function (event) {
                event.preventDefault();
                LoadPageOfEvents(0, eventNavPageSize);
                eventSelectDialog.open();
                eventSelectDialog.getModalBody().html('<img src="Content/Images/progress-wheel.gif" />');
            });
        });

        function LoadPageOfEvents(pageIndex, pageSize) {
            $.post("RealTime/GetAllEvents", { page: pageIndex, pageSize: pageSize }, function (data) {
                var dataArea = eventSelectDialog.getModalBody();
                if (data.Error) {
                    dataArea.html('<div class="alert alert-danger">' + data.Error + '</div>');
                } else {
                    var eventTable = $('<table class="table" />');
                    eventTable.append('<tr>'
                        + '<th>@Html.AdminResourceString("EventID").ToJavascriptSafeString()</th>'
                        + '<th>@Html.AdminResourceString("Title").ToJavascriptSafeString()</th>'
                        + '<th>@Html.AdminResourceString("Status").ToJavascriptSafeString()</th></tr>');
                    for (var i = 0; i < data.Items.length; i++) {
                        var newRow = $('<tr />');
                        if (i % 2 == 0) {
                            newRow.css("background-color", "#f5f5f5");
                        }
                        newRow.append(
                            $('<td />').append($('<a href="#EventSelectionLink" class="EventSelectionLink" onclick="SelectThisEvent(this);return false;" />')
                                .html(data.Items[i].EventID)
                                .attr("data-event-id", data.Items[i].EventID)));
                        newRow.append(
                            $('<td />').append($('<a href="#EventSelectionLink" class="EventSelectionLink" onclick="SelectThisEvent(this);return false;" />')
                                .html(data.Items[i].EventTitle)
                                .attr("data-event-id", data.Items[i].EventID)));
                        newRow.append(
                            $('<td />').append($('<a href="#EventSelectionLink" class="EventSelectionLink" onclick="SelectThisEvent(this);return false;" />')
                                .html(data.Items[i].Status)
                                .attr("data-event-id", data.Items[i].EventID)));
                        eventTable.append(newRow);
                    }
                    dataArea.html(eventTable);
                    dataArea.append(GeneratePageLinkElements(new Number(pageIndex), new Number(data.PageCount)))

                }
            });
        }

        function GeneratePageLinkElements(currentPage, totalPages) {
            var pagerlinks = $('<ul class="pagination" />');

            if (totalPages <= 1) {
                return "";
            }

            //Start
            if (currentPage > 0) {
                pagerlinks.append(EnabledPagerButton(currentPage - 1, "&laquo;"));
            }
            else {
                pagerlinks.append(DisabledPagerButton("&laquo;"));
            }

            //First 2 Pages
            if (currentPage >= 2) {
                pagerlinks.append(EnabledPagerButton(0, "1"));
                pagerlinks.append(EnabledPagerButton(1, "2"));
            }

            //Left Partition
            if (currentPage >= 4) {
                if (currentPage == 4) {
                    pagerlinks.append(EnabledPagerButton(Math.floor(currentPage / 2), (Math.floor(currentPage / 2) + 1)));
                }
                else if (currentPage == 5) {
                    pagerlinks.append(EnabledPagerButton(Math.floor(currentPage / 2), (Math.floor(currentPage / 2) + 1)));
                    pagerlinks.append(EnabledPagerButton(Math.floor(currentPage / 2) + 1, (Math.floor(currentPage / 2) + 2)));
                }
                else {
                    pagerlinks.append(DisabledPagerButton("..."));
                    pagerlinks.append(EnabledPagerButton(Math.floor(currentPage / 2), (Math.floor(currentPage / 2) + 1)));
                    pagerlinks.append(DisabledPagerButton("..."));
                }
            }

            //Current Page                              
            if (currentPage != 2 && currentPage != 0) {
                pagerlinks.append(EnabledPagerButton(currentPage - 1, currentPage));
            }
            pagerlinks.append(ActivePagerButton((currentPage + 1)));
            if (currentPage != (totalPages - 3) && currentPage != (totalPages - 1)) {
                pagerlinks.append(EnabledPagerButton(currentPage + 1, (currentPage + 2)));
            }

            //Right Partition
            if (currentPage <= (totalPages - 5)) {
                if (totalPages - currentPage == 5) {
                    pagerlinks.append(EnabledPagerButton(Math.floor((totalPages - currentPage) / 2) + currentPage, (Math.floor((totalPages - currentPage) / 2) + currentPage + 1)));
                }
                else if (totalPages - currentPage == 6) {
                    pagerlinks.append(EnabledPagerButton(Math.floor((totalPages - currentPage) / 2) + currentPage - 1, (Math.floor((totalPages - currentPage) / 2) + currentPage)));
                    pagerlinks.append(EnabledPagerButton(Math.floor((totalPages - currentPage) / 2) + currentPage, (Math.floor((totalPages - currentPage) / 2) + currentPage + 1)));
                }
                else {
                    pagerlinks.append(DisabledPagerButton("..."));
                    pagerlinks.append(EnabledPagerButton(Math.floor((totalPages - currentPage) / 2) + currentPage, (Math.floor((totalPages - currentPage) / 2) + currentPage + 1)));
                    pagerlinks.append(DisabledPagerButton("..."));
                }
            }

            //Last 2 Pages
            if (currentPage < totalPages - 2) {
                pagerlinks.append(EnabledPagerButton(totalPages - 2, (totalPages - 1)));
                pagerlinks.append(EnabledPagerButton((totalPages - 1), totalPages));
            }

            //End
            if (currentPage < (totalPages - 1)) {
                pagerlinks.append(EnabledPagerButton(currentPage + 1, "&raquo;"));
            }
            else {
                pagerlinks.append(DisabledPagerButton("&raquo;"));
            }

            return pagerlinks;
        }

        function EnabledPagerButton(pageNumber, linkText) {
            return $('<li />')
                .append($('<a href="#GoToPage_' + pageNumber + '" data-target-page="' + pageNumber + '" onclick="NavigateToPage(this);return false;" />').html(linkText));
        }

        function DisabledPagerButton(linkText) {
            return $('<li />').addClass("disabled")
                .append($('<a />').html(linkText));
        }

        function ActivePagerButton(linkText) {
            return $('<li />').addClass("active")
                .append($('<a />').html(linkText));
        }

        function SelectThisEvent(thisLink) {
            var selectedEventId = $(thisLink).attr("data-event-id");
            console.log("selectedEventId: ", selectedEventId);
            $("#EventID").val(selectedEventId);
            eventSelectDialog.close();
            if (!isSubmitting) {
                isSubmitting = true;
                $("#Report1").submit();
            }
            return false;
        }
        function NavigateToPage(thisLink) {
            var targetPage = $(thisLink).attr("data-target-page");
            console.log("targetPage: ", targetPage);
            LoadPageOfEvents(targetPage, eventNavPageSize);
            return false;
        }
    </script>
}
@section scripts {
    <script>
        function resizeText(px) {
            var reportText = document.getElementById("report");
            if (reportText.style.fontSize == "") {
                reportText.style.fontSize = "12px";
            }
            reportText.style.fontSize = (px) + "px";
        }
</script>
}
<div class="panel panel-default report double-scroll">
    <table class="table table-condensed report report--event-activity" id="report">
        <thead>
            @{
                int i = 0;
                while (i < columnList.Length)
                {
                    <tr>
                        @for (int j = 0; i < columnList.Length && j < max_cols_per_row; j++)
                        {
                            string columnName = columnList[i];
                            <th>
                                @Html.AdminResourceString(columnName)
                            </th>
                            i++;
                        }
                    </tr>
                }
            }
        </thead>
        @if (Model != null && Model.Count > 0)
        {
            <tbody>
                @foreach (Dictionary<string, object> reportRecord in Model)
                {
                    i = 0;
                    while (i < columnList.Length)
                    {
                        <tr>
                            @for (int j = 0; i < columnList.Length && j < max_cols_per_row; j++)
                            {
                                string columnName = columnList[i];
                                var thisColumnValue = reportRecord[columnName];
                                string thisColumnType = thisColumnValue.GetType().Name;
                                <td>
                                    @if (!string.IsNullOrEmpty(thisColumnValue.ToString()))
                                    {
                                        if (thisColumnType == "Boolean")
                                        {
                                            bool boolValue;
                                            if (bool.TryParse(thisColumnValue.ToString(), out boolValue))
                                            {
                                                @(boolValue ? Html.GlobalResource("Yes") : Html.GlobalResource("No"))
                                            }
                                        }
                                        else if (thisColumnType == "DateTime")
                                        {
                                            DateTime dttmValue;
                                            if (DateTime.TryParse(thisColumnValue.ToString(), out dttmValue))
                                            {
                                                @Html.LocalDTTM(dttmValue, "G")
                                            }
                                        }
                                        else if (thisColumnType == "Decimal")
                                        {
                                            decimal decimalValue;
                                            if (decimal.TryParse(thisColumnValue.ToString(), out decimalValue))
                                            {
                                                @decimalValue.ToString("F")
                                            }
                                        }
                                        else if (thisColumnType == "Int32")
                                        {
                                            @thisColumnValue
                                        }
                                        else if (columnName == "Description")
                                        {
                                            @Html.Raw(thisColumnValue)
                                        }
                                        else
                                        {
                                            @thisColumnValue
                                        }
                                    }
                                </td>
                                i++;
                            }
                        </tr>
                    }
                }
            </tbody>
        } // if (Model != null && Model.Count > 0)
        else
        {
            <tr><td colspan="@columnList.Length" class="no-history">@Html.AdminResource("NoResultsToDisplay")</td></tr>
        }
    </table>
</div>
